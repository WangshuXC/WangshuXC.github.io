<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端复习笔记</title>
    <link href="/2024/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML与CSS"><a href="#HTML与CSS" class="headerlink" title="HTML与CSS"></a>HTML与CSS</h2><h3 id="HTML标签类型"><a href="#HTML标签类型" class="headerlink" title="HTML标签类型"></a>HTML标签类型</h3><ul><li>块级元素 block<ul><li>div ul ol li p from table tr h1-h6</li><li>可设置宽高</li><li>独占一行</li><li>margin和padding都生效</li></ul></li><li>内联元素 inline<ul><li>span a b i em strong</li><li>不可设置宽高</li><li>不会独占一行</li><li>margin和padding的top和bottom都不生效</li></ul></li><li>内联块级元素<ul><li>input select textarea img td</li><li>可设置宽高</li><li>不会独占一行</li><li>margin和padding都生效</li></ul></li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ul><li><p>概念</p><blockquote><p>页面之所以能够展示到浏览器上，是需要浏览器的渲染引擎执行渲染的。浏览器的渲染是有一系列标准的CSS 基础框盒模型(CSS basic box model)，就是标准之一，它会将所有元素表示为一个个矩形的盒子(box)。我们称之为盒子模型。</p></blockquote></li><li><p>组成部分</p><ul><li>content 内容的宽高</li><li>padding 内边距</li><li>border 边框</li><li>margin 外边距</li></ul></li><li><p>box-sizing</p><p>box-sizing可以指定浏览器用哪种方式来渲染盒子模型</p><p>box-sizing: content-box | border-box | inherit</p><ul><li>content-box 标准盒子模型</li><li>border-box 怪异（IE）盒子模型（元素的宽和高包含了border和padding）</li><li>inherit 继承（默认）</li></ul></li></ul><h3 id="浮动元素"><a href="#浮动元素" class="headerlink" title="浮动元素"></a>浮动元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">float</span>: left | right | <span class="hljs-built_in">none</span>(默认)<br></code></pre></td></tr></table></figure><ul><li><p>特性</p><ul><li>相对于父元素:浮动元素的外边界不会超出父元素的内边界。</li><li>相对于兄弟浮动元素:后出现的浮动元素排在先出先的浮动元素之后( left时，后出现的排在先出现的右侧；right时，后出现的排在先出现的左侧)</li><li>脱离标准流:浮动元素不再保留其在文档流中的位置，而是根据其浮动方向移动到指定的位置。</li><li>一行内显示:如果多个元素都设置了浮动，它们会按照各自的浮动方向在一行内显示，并沿着顶部边缘对齐</li><li>具有行内块元素特性:浮动元素可以设置宽度和高度，即使它们原先是行内元素。</li><li>对布局的影响:当父元素的高度小余内容高度时，会影响父元素的相邻元素的布局。</li></ul></li><li><p>清除浮动</p><ul><li><p>父元素增加属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: auto | hideden | overlay | scroll<br></code></pre></td></tr></table></figure></li><li><p>相邻元素增加属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">clear</span>: both;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>: <span class="hljs-built_in">static</span>(默认) | relative | absolute | fixed | sticky<br></code></pre></td></tr></table></figure><ul><li><p>static:：元素按正常文档流进行布局，不被其他元素影响</p></li><li><p>relative：相对定位，通过设置top、bottom、left、right来调整元素的位置，但保留原本的空间</p></li><li><p>absolute：绝对定位，不按照正常文档流的方式，而是根据最近的已定位的祖先元素（relative）进行定位，如果没有就使用body作为参考</p></li><li><p>fixed：固定定位，与absolute类似，但始终相对于视窗而非窗口</p></li><li><p>sticky：粘性定位，当元素到达指定位置时，开始相对定位，否则随滚动条滚动</p></li><li><p>偏移</p><ul><li>top&#x2F;bottom&#x2F;left&#x2F;right：偏移量，定义元素相对于其父元素的边线的距离</li></ul></li></ul><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><blockquote><p>用于定义元素的特殊状态</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">selector:pseudo-class&#123;<br>property:value;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的伪类</p><ul><li>hover 鼠标悬停</li><li>nth-child() 第n个子元素</li><li>first-child 第一个子元素</li><li>last-child 最后一个子元素</li></ul><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><blockquote><p>用于设置元素指定部分的样式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">selector::pseudo-element&#123;<br>property:value;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的伪元素</p><ul><li><p>after 在每个<code>&lt;selector&gt;</code>之后插入内容</p></li><li><p>before 在每个<code>&lt;selector&gt;</code>之前插入内容</p></li><li><p>first-letter 选择每个<code>&lt;selector&gt;</code>的首字母</p></li><li><p>first-line 选择每个<code>&lt;selector&gt;</code>的首行</p></li><li><p>selection 选择用户选择的元素部分</p></li><li><p>content属性</p><p>可以是文字也可以是图片</p></li><li><p>常见案例：位于边角的未读消息数量&#x2F;红点</p></li></ul><h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><p>Flex布局又称弹性布局，是CSS3中新增的规范。适应各种设备的不同宽度，而不必依赖于传统的块状布局和浮动定位。目前主流浏览器均已支持(不支持IE9及以下版本)。</p><ul><li><p>核心</p><ul><li>弹性容器：采用Flex布局的外层容器</li><li>弹性项：容器中的子元素</li><li>主轴：弹性容器的水平或垂直方向</li><li>交叉轴：与主轴垂直的方向</li><li>对其方向：设置弹性项在弹性容器内对齐的方式</li></ul></li><li><p>container属性</p><ul><li><p>flex-direction</p><ul><li><p>用于确定主轴方向</p></li><li><p><code>flex-direction: row(水平从左向右) | row-reserse | column(竖直从上向下) | column-reverse;</code></p></li></ul></li><li><p>flex-wrap</p><ul><li><p>换行方向</p></li><li><p><code>flex-wrap: nowrap(不换行，默认) | wrap(换行)  | wrap-reverse(换行，第一行在下方);</code></p></li></ul></li><li><p>flex-flow</p><ul><li>flex-direction和flex-wrap的简写形式，默认值为 row nowrap</li></ul></li><li><p>justify-content</p><ul><li><p>主轴对齐方式</p></li><li><p><code>justify-content: flex-star(默认，左对齐) | flex-end(右对齐) | center(居中) | space-between(两端对齐，项目之间间隔相等) | space-around(每个项目两侧的间隔相等，项目之间的间隔比项目与边框的间隔大一倍);</code></p></li></ul></li><li><p>align-items</p><ul><li><p>交叉轴对齐方式</p></li><li><p><code>align-items: flex-start(交叉轴的起点对齐) | flex-end (交叉轴的终点对齐)| center(交叉轴的中点对齐) | baseline(项目的第一行文字的基线对齐) | stretch(默认，如果项目未设置高度或设置为auto，将占满整个容器高度);</code></p></li></ul></li><li><p>align-content</p><ul><li><p>多个交叉轴的对齐方式</p></li><li><p><code>align-content: flex-star(交叉轴的起点对齐) | flex-end(交叉轴的终点对齐) | center(交叉轴的中点对齐) | space-between(与交叉轴的两端对齐，轴线之间的间隔平均分布) | space-around(每根周线的两侧的间隔都相等，所以轴线之间的间隔比轴线和边框的间隔大一倍) | stretch(默认，轴线占满整个交叉轴);</code></p></li></ul></li></ul></li><li><p>item属性</p><ul><li>order<ul><li>定义项目的排列顺序，数值越小越靠前，默认为0</li></ul></li><li>flex-grow<ul><li>定义项目的放大比例，默认为0（即如果存在剩余空间也不放大），如果为1会占满剩余空间，设置为n就是宽度为设置为1的n倍。</li></ul></li><li>flex-shrink<ul><li>定义项目的缩小比例，默认为1（即如果空间不足，该项目就缩小）</li></ul></li><li>flex-basis<ul><li>定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据这个属性计算主轴是否有多余的空间。默认值是auto，即项目的本来大小</li></ul></li><li>align-self<ul><li>允许单个项目由与其他项目不一样的对齐方式，可以覆盖<code>align-items</code>属性。默认为auto，表示继承父元素的<code>align-items</code>属性，如果没有父元素就等同于<code>stretch</code></li></ul></li><li>flex<ul><li>flex是flex-grow，flex-shrink，flex-basis的简写，默认值是<code>0 1 auto</code>。后两个属性可选</li></ul></li></ul></li><li><h3 id="css可继承的属性"><a href="#css可继承的属性" class="headerlink" title="css可继承的属性"></a>css可继承的属性</h3><ul><li>字体全部属性<br>font、font-style、font-family、font-variant、font-weight、font-size、font-stretch、font-size-adjust</li><li>文本全部属性<br>color、 direction、 letter-spacing、 line-height、 text-align、 text-indent、 text-decoration、 text-shadow、 text-transform、word-spacing、unicode-bidi、white-space.</li><li>元素可见性<br>visibility。</li><li>表格的全部属性<br>border-collapse、border-spacing、caption-side、empty-cells、table-layout.</li><li>列表的全部属性<br>list-style、list-style-type、list-style-position、list-style-image.</li><li>其他属性<br>cursor、quotes、pointer-events.</li></ul><h3 id="Head标签"><a href="#Head标签" class="headerlink" title="Head标签"></a>Head标签</h3><ul><li>meta标签<ul><li>描述了一些基本的元数据</li><li>提供了元数据（虽然不显示在页面上，但是会被浏览器解析）</li><li>用于网页的描述、关键词、文件的最后修改时间、作者和其他元数据</li><li>元数据可以用于浏览器（如何显示内容或者加载页面）、搜索引擎（关键字）或者其他Web服务(如每多少秒刷新页面)</li></ul></li><li>title<ul><li>当前页面的标题</li></ul></li><li>link<ul><li>定义了文档与外部资源的关系，通常用来引用外部的css文件</li></ul></li><li>base<ul><li>描述了基本的链接地址&#x2F;链接目标，该标签作为HTML文档中所有链接标签的默认链接</li></ul></li><li>其他<ul><li>script、style</li></ul></li></ul><h3 id="CSS长度单位"><a href="#CSS长度单位" class="headerlink" title="CSS长度单位"></a>CSS长度单位</h3><ul><li>单位及分类<ul><li>绝对长度：px、in、cm、mm、pt、pc</li><li>相对长度：em、rem、ex、vh、vw、vmin、vmax、%、fr</li></ul></li><li>绝对长度<ul><li>绝对长度表示一个真实的物理尺寸，大小固定，不会因其他元素的尺寸变化而变化</li><li>px：原来是物理像素点。目前像素是相对于屏幕分辨率的逻辑像素</li><li>in：英寸，1in &#x3D;&#x3D; 2.54cm &#x3D;&#x3D; 96px</li><li>cm：厘米 ，1cm &#x3D;&#x3D; 37.8px</li></ul></li><li>相对长度<ul><li>em：相对于当前对象内文本的字体尺寸，如果当前行内的字体尺寸没被设置，就相对于浏览器的默认字体尺寸（在没有CSS规则的前提下，1em &#x3D;&#x3D; 16px）</li><li>rem：与em类似，但是总是相对于根元素（html）的字体大小</li><li>ex：所用字体中小写x的高度，通常是字体高度的一半。（font-family改变时ex可能会改变）</li><li>ch：类似于ex，但是是基于字符0的高度</li><li>vh：可视高度（viewport height）</li><li>vw：可视宽度（viewport width）</li><li>vmin：vw和vh中较小的值</li><li>vmax：同vmin</li><li>%：以父元素的长度为1的百分比的值</li><li>fr：grid布局中利用的一个长度单位</li></ul></li></ul><h3 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h3><blockquote><p>页面的设计与开发应当根据用户的行为以及设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相应的响应和调整</p></blockquote><ul><li><p>特点</p><ul><li>同时匹配PC+平板+手机等不同屏幕尺寸或比例的设备</li><li>网站的布局会根据视口的尺寸或比例来调整模块的大小和位置</li></ul></li><li><p>实现方式</p><ul><li>vw&#x2F;vh、百分比、rem、媒体查询</li></ul></li><li><p>媒体查询</p><blockquote><p>CSS 媒体查询是一种应用 CSS 的方法，仅在浏览器和设备的环境与你指定的规则相匹配的时候，CSS 才会真的被应用。<br>媒体查询是响应式 Web 设计的关键部分，因为它允许你按照视口的尺寸创建不同的布局。不过它也可以用来探测和你的站点运行的环境相关联的其它条件，比如用户是在使用触摸屏还是鼠标。</p></blockquote><ul><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> media-type <span class="hljs-keyword">and</span> (media-feature-tule)&#123;<br>    css rules<br>&#125;<br></code></pre></td></tr></table></figure><p>媒体特征规则（media-feature-tule）</p><ul><li><p>宽和高</p><p>当视口宽度&#x2F;高度大于或者小于某个大小或者是恰好处于某个大小的时候应用CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">400px</span>)&#123;<br>  <span class="hljs-selector-tag">body</span>&#123;<br>      <span class="hljs-attribute">background-color</span>:white;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>朝向</p><p>orientation，可以设置竖放portait和横放landscape</p></li><li><p>逻辑”与“</p><p>为了混合媒体特征，可以用逻辑与的方式在上面用and关键词来混合媒体特征</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">400px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientatino</span>:landscape)&#123;<br>    <span class="hljs-selector-tag">body</span>&#123;<br>        <span class="hljs-attribute">background-color</span>:black;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>逻辑”非“</p><p>可以用not操作符让整个媒体查询失效，但是也直接反转了整个媒体查询的意义</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientatino</span>:landscape)&#123;<br>    <span class="hljs-selector-tag">body</span>&#123;<br>        <span class="hljs-attribute">background-color</span>:blue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><blockquote><p>CSS动画包括两种，transition过度和@keyframes关键帧</p></blockquote><ul><li><p>transition</p><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>transition-property 规定应该过度效果的css属性的名称(none | all(默认) | preperty)</li><li>transition-duration 规定完成过度效果需要花费的事件</li><li>transition-timing-function<ul><li>linear：规定以相同速度开始至结束的过渡效果。等同于cubic-bezier(0,0,1,1)</li><li>ease：规定慢速开始，然后变快，再慢速结束。等同于cubic-bezier(0.25,0.1,0.25,1)</li><li>ease-in：规定以慢速开始的过渡效果。等同于cubic-bezier(0.42,0,1,1)</li><li>ease-out：规定以慢速结束的过渡效果。等同于cubic-bezier(0,0,0.58,1)</li><li>ease-in-out：规定以慢速开始和慢速结束的过渡效果。等同于cubic-bezier(0.42,0,0.58,1)</li><li>cubic-bezier(n,n,n,n)：在函数中定义自己的值，0-1之间</li></ul></li><li>transition-delay 规定过渡效果的延迟</li><li>transition：以上四个属性的简写，按property duration timing-function delay的顺序</li></ul></li><li><p>@keyframes</p><blockquote><p>关键帧动画和过渡都可以实现动画效果，不同的是触发形式。过渡需要在某个属性发生变化时触发,<br>hover，active，关键帧动画可以自动触发。</p></blockquote><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> example&#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<span class="hljs-attribute">background-color</span>:red;&#125;<br>    <span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">background-color</span>:yellow;&#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">background-color</span>:red;<br>    <span class="hljs-attribute">animation-name</span>:example;<br>    <span class="hljs-attribute">animation-duration</span>:<span class="hljs-number">4s</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h3><ul><li><p>行内元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*在父元素中设置是属性*/</span><br><span class="hljs-attribute">text-align</span>: center;<br><span class="hljs-attribute">line-height</span>: 父元素的高;<br></code></pre></td></tr></table></figure></li><li><p>已知元素的宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*父元素*/</span><br><span class="hljs-attribute">position</span>: relative;<br><br><span class="hljs-comment">/*目标元素*/</span><br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">margin-left</span>: 目标元素的宽/<span class="hljs-number">2</span>;<br><span class="hljs-attribute">margin-top</span>: 目标元素的高/<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li><li><p>未知元素的宽高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*父元素*/</span><br><span class="hljs-attribute">position</span>: relative;<br><br><span class="hljs-comment">/*目标元素*/</span><br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br></code></pre></td></tr></table></figure></li><li><p>Flex + margin:auto</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*父元素*/</span><br><span class="hljs-attribute">display</span>: flex;<br><br><span class="hljs-comment">/*目标元素*/</span><br><span class="hljs-attribute">margin</span>: auto;<br></code></pre></td></tr></table></figure></li><li><p>Flex 主轴与交叉轴</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*父元素*/</span><br><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">justify-content</span>: center;<br><span class="hljs-attribute">align-items</span>: center;<br></code></pre></td></tr></table></figure></li><li><p>TableCell</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*父元素*/</span><br><span class="hljs-attribute">display</span>: table-cell;<br><span class="hljs-attribute">text-align</span>: center;<br><span class="hljs-attribute">vertical-align</span>: middle;<br><br><span class="hljs-comment">/*目标元素*/</span><br><span class="hljs-attribute">margin</span>: auto;<br></code></pre></td></tr></table></figure></li></ul><h3 id="元素隐藏"><a href="#元素隐藏" class="headerlink" title="元素隐藏"></a>元素隐藏</h3><ul><li>display: none<ul><li>元素本身占有的空间按会被其他元素占有，会引起回流和重绘</li><li>绑定的事件不会被触发</li></ul></li><li>visibility: hidden<ul><li>元素不可见，但依旧会占用空间，不会引起回流，但是会引起重绘</li><li>绑定的事件不会被触发</li></ul></li><li>opacity: 0<ul><li>元素不可见，依旧会占据空间</li><li>不会引起回流，一般情况下会引起重缓（如果是animation对opacity做出的改变就不会引起重绘）</li><li>依然可以触发（点击）事件</li><li>其子元素通过opacity的值大于0，是无效的，依然不可见</li></ul></li><li>position: absolute + 移出可视窗口<ul><li>不影响正常布局</li></ul></li><li>other<ul><li>宽高设置为0，clip-path裁剪</li></ul></li></ul><h3 id="CSS选择器以及优先级"><a href="#CSS选择器以及优先级" class="headerlink" title="CSS选择器以及优先级"></a>CSS选择器以及优先级</h3><ul><li><p>id选择器 <code>#id&#123;&#125;</code></p></li><li><p>类选择器 <code>.class&#123;&#125;</code></p></li><li><p>标签选择器 <code>div&#123;&#125;</code></p></li><li><p>后代选择器 <code>#id div&#123;&#125; </code>选择id为id下的所有div</p></li><li><p>子选择器 <code>#id &gt; div&#123;&#125;</code> 只选择子div</p></li><li><p>相邻选择器 <code>li + li&#123;&#125;</code></p></li><li><p>群组选择器 <code>html,body&#123;&#125;</code></p></li><li><p>伪类选择器</p></li><li><p>伪元素选择器</p></li><li><p>属性选择器</p><ul><li>[name]{} 所有含有name属性的元素</li><li>[name &#x3D; abc]{} 所有name的属性的值等于abc的元素</li><li>[name ^&#x3D; abc]{} 所有name的属性的值由abc开头的元素</li><li>[name $&#x3D; abc]{} 所有name的属性的值由abc结尾的元素</li><li>[name *&#x3D; abc]{} 所有name的属性的值包含abc的元素</li></ul></li><li><p>层次选择器 <code>p~ul&#123;&#125;</code> 选择前面有p元素的所有ul元素</p></li><li><p>通配符 <code>*&#123;&#125;</code></p></li><li><p>优先级</p><p>!important &gt; 内联 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符</p></li></ul><h3 id="文本溢出"><a href="#文本溢出" class="headerlink" title="文本溢出"></a>文本溢出</h3><ul><li><p>单行文本溢出</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; 必须设定宽度<br><span class="hljs-attribute">overflow</span>: hidden; 必须指定<br><br><span class="hljs-attribute">text-overflow</span>: ellipsis; 指定文本的溢出方式<br><span class="hljs-attribute">white-space</span>: nowrap; 指定文本不换行<br></code></pre></td></tr></table></figure></li><li><p>多行文本溢出</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; 必须设定宽度<br><span class="hljs-attribute">overflow</span>: hidden; 必须指定<br><br><span class="hljs-attribute">text-overflow</span>: ellipsis; 指定文本的溢出方式<br><span class="hljs-attribute">display</span>: -webkit-box; 指定 - webkit-box 伸缩盒显示<br>-webkit-box-corent: vertical; 伸缩盒的排列方式为垂直<br>-webkit-line-clamp: <span class="hljs-number">3</span>; 最多显示行数<br></code></pre></td></tr></table></figure></li></ul><h3 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h3><ul><li><p>回流（重排）</p><blockquote><p>当我们对DOM的修改，引发了DOM几何变化(比如位置、尺寸、形状或隐藏元素等)时，浏览器需要重新计算元素的几何属性，然后再将元素绘制出来。<br>简单理解:就是重新排列页面内容</p></blockquote><ul><li>如何触发回流<ol><li>元素的位置发生变化</li><li>元素的尺寸发生变化(padding,margin,border,width,height等)</li><li>内容发生变化(文本长度或图片尺寸等)</li><li>页面滚动</li><li>浏览器窗口尺寸发生变化</li></ol></li></ul></li><li><p>重绘</p><blockquote><p>当我们对DOM的修改，导致样式发生改变(比如改变了字体颜色、背景颜色等)时，浏览器需要重新绘制出新的样式</p></blockquote><ul><li>如何触发重绘<ol><li>文本颜色或方向发生了变化</li><li>背景发生了改变</li><li>阴影发生了变化</li><li>页面发生了回流</li></ol></li></ul></li></ul></li></ul><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ul><li><p>概念</p><blockquote><p> 我们多次提到JS中万物皆对象(包括 null 也是对象)，每个对象都有其原型(这时候 null 除外)。</p><p> 我们用 console.log()打印一个对象时，一般情况下会在控制台上看到该对象的 [[prototype]]这个属性，这就是该对象的原型。</p></blockquote></li><li><p>作用</p><blockquote><p>Js设计原型的初衷就是为了实现<strong>继承</strong>。也就是说原型对象上的属性和方法都能被实例对象<strong>共享</strong>。</p></blockquote><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span> <span class="hljs-title class_">Obj</span>(name)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-title class_">Obj</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;学生&#x27;</span>; <span class="hljs-comment">//原型属性 type</span><br><span class="hljs-title class_">Obj</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//原型方法 say</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;；<br><span class="hljs-keyword">const</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Obj</span>(<span class="hljs-string">&#x27;张三&#x27;</span>)；<br><span class="hljs-keyword">const</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Obj</span>(<span class="hljs-string">&#x27;李四&#x27;</span>)；<br><span class="hljs-comment">//两个实例对象(obj1, obj2)都继承了原型对象Obj上的原型属性type和原型方法say()</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>在原型的例子中将obj1打印到控制台：<code>console.log(obj1);</code>就可以看到有实例属性[[prototype]]，展开后能看到里面有原型属性、方法、构造函数constructor；除此之外还有一个[[prototype]]，再展开会发现里面还有很多方法和属性，其中有我们熟悉的valueOf()，toString()等</p><ul><li><p>概念</p><blockquote><p>原型本就是一个对象（所以我们一般称之为原型对象），所以他也有原型，这样一级一级的原型嵌套，直到最顶端（原型的尽头）就形成了一条链，我们称之为<strong>原型链</strong></p></blockquote></li><li><p>原型链的尽头是什么</p><p>是null</p></li><li><p>获取原型的方法</p><ul><li>__proto__浏览器提供的非标准方法 <code>console.log(obj1.__proto__)</code></li></ul></li><li><p>Object.getPrototypeOf（对象）ES5提供的标准方法 <code>console.log(Object.getPrototypeOf(obj1))</code></p></li></ul><h3 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h3><ul><li><p>概念</p><blockquote><p>作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域和集合。作用域决定了代码区块中变量和其他资源的可见性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//1</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure></li><li><p>分类</p><p>作用域分为：全局作用域、函数（局部）作用域、块级作用域</p><ul><li><p>全局作用域</p><p>任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下生命的变量可以在程序的任意位置访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<span class="hljs-comment">//abc</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<span class="hljs-comment">//abc</span><br></code></pre></td></tr></table></figure></li><li><p>函数作用域</p><p>函数作用域也叫局部作用域，如果一个变量是声明在函数内部的，他就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以为去访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<span class="hljs-comment">//abc</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure></li><li><p>块级作用域</p><p>ES6中引入了<code>let</code>和<code>const</code>关键字，和<code>var</code>关键字不同，在大括号中使用<code>let</code>和<code>const</code>声明的变量存在于块级作用域中，在大括号外不能访问这些变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)&#123;<br>    <span class="hljs-keyword">let</span> a = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//报错</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>作用域链</p><p>当在 Javascript 中使用一个变量的时候，首先 Javascript 引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域。如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//如果这里声明了一个值为def的str，就不会去找值为abc的str</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="This"><a href="#This" class="headerlink" title="This"></a>This</h3><ul><li><p>为什么要用this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> objl = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;obj1&#x27;</span>,<br>    <span class="hljs-attr">foo</span>: foo<br>&#125;<br><span class="hljs-keyword">var</span> obj2 =&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;obj2&#x27;</span><br>    foo : foo<br>&#125;<br>obj1.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">// 我是 obj1</span><br>obj2.<span class="hljs-title function_">foo</span>();<span class="hljs-comment">// 我是 obj2</span><br></code></pre></td></tr></table></figure><p>上面的代码中，foo()只定义了一次，却可以被不同的对象引用，实现了代码共享</p></li><li><p>this的指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><br><span class="hljs-title function_">fn</span>();<span class="hljs-comment">//1 window</span><br><span class="hljs-comment">//如果是严格模式，this会指向undefined</span><br></code></pre></td></tr></table></figure><p>this的最终指向要看它绑定的结果</p></li><li><p>默认绑定（隐式绑定）</p><p>从上面两个例子可以看到，this指向的是函数调用者。未明确指定绑定对象时，this会默认（或者说JS会隐式地将this）绑定到函数的调用者</p></li><li><p>显式绑定</p><p>可以通过call(), bind(), apply()方法，显式地将this绑定到某个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;obj&#x27;</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br>fn.<span class="hljs-title function_">call</span>(obj) <span class="hljs-comment">//&#123;name:&#x27;obj&#x27;&#125; call()方法会立即执行</span><br></code></pre></td></tr></table></figure></li><li><p>箭头函数没有this</p><p>箭头函数不能被实例化，也就不会有this（箭头函数的特性）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">var obj1 = &#123;</span><br><span class="hljs-string">    name:&#x27;obj1&#x27;,</span><br><span class="hljs-string">    foo: foo</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">var obj2 = &#123;</span><br><span class="hljs-string">    name:&#x27;obj2&#x27;,</span><br><span class="hljs-string">    foo:foo</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">obj1.foo();// 我是</span><br><span class="hljs-string">obj2.foo();// 我是</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ul><li>new的流程<ol><li>创建一个新的空对象</li><li>将新对象的原型指向构造函数的原型</li><li>将构造函数的作用域赋给新对象（因此在构造函数中可以使用this关键字来引用新对象）</li><li>如果构造函数没有明确的返回一个对象，就返回新创建的对象；否则返回构造函数中返回的对象</li></ol></li></ul><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><ul><li><p>概念</p><blockquote><p>BOM是浏览器对象模型(Brower Object Model)缩写。主要就是用来控制浏览器的，比如前进、后退、跳转等；以及获取客户端的一些信息，比如浏览器的版本、用户的操作系统、屏幕的分辨率等</p></blockquote></li><li><p>window</p><blockquote><p>BOM的核心就是 window 对象。而 window 对象有很多方法与属性。其主要属性有五个：navigator、location、document、history、screen</p></blockquote></li><li><p>window方法（常用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建新窗口</span><br><span class="hljs-keyword">let</span> win= <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;width=200,height=200&quot;</span>);<br><br><span class="hljs-comment">// 调整新窗口大小</span><br>win.<span class="hljs-title function_">resizeTo</span>(<span class="hljs-number">300</span>，<span class="hljs-number">300</span>);<br><br><span class="hljs-comment">// 弹出提示</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;提示&#x27;</span>)<br><br><span class="hljs-comment">// 弹出对话番</span><br><span class="hljs-keyword">let</span> ok = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你好!&quot;</span>);<br><br><span class="hljs-comment">// 计时与取消计时</span><br><span class="hljs-keyword">let</span> t = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)&#125;，<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">clearInterval</span>(t)<br><br><span class="hljs-comment">// 延迟与取消延迟</span><br><span class="hljs-keyword">let</span> t = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)&#125;，<span class="hljs-number">100</span>)<br><span class="hljs-built_in">clearTimeout</span>(t)<br></code></pre></td></tr></table></figure></li><li><p>navigator</p><p>navigator对象包含有关浏览器的信息，其对象的方法和属性也有很多</p><ul><li>userAgent返回浏览器发给服务器的用户代理标头<code>console.log(window.navigator.userAgent)</code></li><li>appVersion返回浏览器版本</li></ul></li><li><p>location</p><p>Location对象包含有关当前URl的信息</p><ul><li><p>hash 设置或返回URl的锚部分(#)</p></li><li><p>host 设置或返回URL的主机名和端口号</p></li><li><p>hostname 设置或返回URL的主机名</p></li><li><p>href 设置或返回整个URL</p></li><li><p>port 设置或返回URL的路径名</p></li><li><p>assign() 加载新文档</p></li><li><p>reload() 重新加载当前文档</p></li><li><p>replace() 用新文档替换当前文档</p></li></ul></li><li><p>history</p><p>History对象包含用户（在浏览器窗口中）访问过的URL</p><ul><li>back() 加载历史列表的上一个URl</li><li>forward() 加载历史列表的下一个URL</li><li>go() 从历史列表中加载特定的URl</li><li>length() 返回历史列表的URL数量</li></ul></li><li><p>screen</p><p>Screen对象包含有关访问者的屏幕信息</p><ul><li>availHeight 返回屏幕高度（不包括windows任务栏）</li><li>availWidth 返回屏幕宽度（不包括windows任务栏）</li><li>height 返回屏幕的总高度</li><li>width返回屏幕的总宽度</li></ul></li></ul><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><ul><li><p>概念</p><blockquote><p>DOM 全称是 Document Object Model，也就是文档对象模型。提供操作页面元素的方法和属性，是HTML和XML的API，DOM把整个页面规划成由节点层级构成的文档。<br>DOM树是Web页面的模型，当浏览器加载一个Web页面时，它会创建这个页面的模型，称为DOM树。</p></blockquote></li><li><p>分类</p><p>常见的DOM节点主要有三种。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs hmtl">&lt;body&gt; &lt; !--元素节点-- &gt;<br>&lt;p class=&#x27;text&#x27; id=&#x27;text_id&#x27;&gt; &lt; !--class、id为属性节点-- &gt;<br>content &lt; !--文本节点-- &gt;<br>&lt;/p&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><ul><li>元素节点：如html、div、a、body等都是元素节点，即标签</li><li>文本节点：向用户展示的内容，如<code>&lt;title&gt;...&lt;/titile&gt;</code>中的”文档标题“</li><li>属性节点：元素的属性，如<code>&lt;div&gt;</code>中的class属性，<code>&lt;a&gt;</code>中的href属性</li></ul></li><li><p>操作</p><p>DOM操作大致分为五类：创建节点，查询节点，更新节点，添加节点，删除节点</p><ul><li><p>创建节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> divEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>)<br><span class="hljs-comment">// createElement()创建节点，接收一个参数(标签名称)</span><br><br><span class="hljs-keyword">const</span> textEl= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-string">&quot;content&quot;</span>);<br><span class="hljs-comment">// createTextNode()创建文本节点，接收一个参数(文本内容)</span><br><br><span class="hljs-keyword">const</span> fragment= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>();<br><span class="hljs-comment">// createDocumentFragment()创建文档碎片()</span><br><span class="hljs-comment">// fragment 文档碎片与 document ”样，可以通过 document 的 api 来处理 fragment</span><br><br><span class="hljs-keyword">const</span> arrt=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(<span class="hljs-string">&#x27;class)；</span><br><span class="hljs-string">// createAttribute 创建属性节点，接收一个参数(属性名称)</span><br><span class="hljs-string">attr.value = &quot;abc；</span><br><span class="hljs-string">//.value 设置属性值</span><br></code></pre></td></tr></table></figure></li><li><p>查询（获取）节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dom= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-comment">// querySelector()接收一个参数，参数参照CSS选择器，可以是标签、id(#id)、class(.class)、属性([name=&quot;name&quot;])及组合选择器。返回一个节点(Node)</span><br><br><span class="hljs-keyword">const</span> domList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;p&quot;</span>)<br><span class="hljs-comment">// querySelectorAll() 接收一个参数，参数参照CSS选择器。返回一个节点数组(NodeList)</span><br><br><span class="hljs-keyword">const</span> dom= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;id&#x27;</span>); <span class="hljs-comment">// 通过ID获取，返回一个节点</span><br><span class="hljs-keyword">const</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;class&#x27;</span>);<span class="hljs-comment">// 通过class获取，返回一个节点数组</span><br><span class="hljs-keyword">const</span> dom=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;span&#x27;</span>);<span class="hljs-comment">// 通过标签名获取，返回一个节点数组</span><br><span class="hljs-keyword">const</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<span class="hljs-comment">// 通过name获取，返回一个节点数组</span><br><span class="hljs-keyword">const</span> html = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>;<span class="hljs-comment">//获取html</span><br><span class="hljs-keyword">const</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<span class="hljs-comment">// 获取body</span><br><span class="hljs-keyword">const</span> all = <span class="hljs-variable language_">document</span>.<span class="hljs-property">all</span>;<span class="hljs-comment">// 以数组类型，返回全部节点</span><br></code></pre></td></tr></table></figure><p>除了document获取之外，还可以通过每个dom的属性再次获取dom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pDom = dom.<span class="hljs-property">parentNode</span>;<span class="hljs-comment">// 当前 dom 的父节点</span><br><span class="hljs-keyword">const</span> children = dom.<span class="hljs-property">childNodes</span>;<span class="hljs-comment">// 当前 dom 的所有子节点</span><br><span class="hljs-keyword">const</span> fChild = dom.<span class="hljs-property">firstChild</span>;<span class="hljs-comment">// 当前 dom 的第一个子节点</span><br><span class="hljs-keyword">const</span> lChild = dom.<span class="hljs-property">lastChild</span>;<span class="hljs-comment">// 当前 dom 的最后一个子节点</span><br><span class="hljs-keyword">const</span> next= dom.<span class="hljs-property">nextSibling</span>;<span class="hljs-comment">// 当前dom 的下一个邻节点</span><br><span class="hljs-keyword">const</span> previous = dom.<span class="hljs-property">previousSibling</span>;<span class="hljs-comment">// 当前 dom 的上一下邻节点</span><br></code></pre></td></tr></table></figure></li><li><p>更新节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dom= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<span class="hljs-comment">// 通过 id 取得一个 dom 节点</span><br><br>dom.<span class="hljs-property">innerHTML</span> =<span class="hljs-string">&quot;&lt;span&gt;你好&lt;/span&gt;&quot;</span>;<span class="hljs-comment">//修改 dom 下的 HTML</span><br>dom.<span class="hljs-property">innerText</span>=<span class="hljs-string">&quot;你好&quot;</span>;<span class="hljs-comment">// 修改 dom 下的纯文本内容</span><br>dom.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> =<span class="hljs-string">&#x27;#ff0000&#x27;</span>;<span class="hljs-comment">// 修改 dom 的样式</span><br></code></pre></td></tr></table></figure></li><li><p>添加节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<span class="hljs-comment">// 通过 id 取得一个 dom 节点</span><br><br>dom.<span class="hljs-property">innerHTML</span> =<span class="hljs-string">&quot;&lt;span&gt;你好&lt;/span&gt;&quot;</span>;<span class="hljs-comment">//修改 dom 下的 HTML</span><br>dom.<span class="hljs-property">innerText</span>=<span class="hljs-string">&quot;你好&quot;</span>;<span class="hljs-comment">//修改 dom 下的纯文本内容</span><br><br><span class="hljs-keyword">const</span> dom2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;p2&#x27;</span>);<br>dom.<span class="hljs-title function_">appendChild</span>(dom2);<br><span class="hljs-keyword">const</span> dom3= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>dom3.<span class="hljs-property">innerHTML</span> =<span class="hljs-string">&quot;&lt;span&gt;你好&lt;/span&gt;&quot;</span>;<br>dom.<span class="hljs-title function_">appendchild</span>(dom3)<span class="hljs-comment">// appendChild(节点)向 dom 中添加一个子节点</span><br><br><span class="hljs-keyword">const</span> dom4 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>dom3.<span class="hljs-property">innerHTML</span> =<span class="hljs-string">&quot;&lt;span&gt;你好啊&lt;/span&gt;&quot;</span>;<br><span class="hljs-keyword">const</span> innerDom= dom.<span class="hljs-title function_">insertBefore</span>(dom4, dom3);<span class="hljs-comment">//insertBefore(要被插入的dom，参考位置)向 dom 中的 dom3 之前，插入一个新的 dom ，返回该节点</span><br><br>dom.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>,<span class="hljs-string">&#x27;white&#x27;</span>);<span class="hljs-comment">//给 dom 添加一个属性节点</span><br></code></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<span class="hljs-comment">// 获取一个节点</span><br><span class="hljs-keyword">const</span> parent = dom.<span class="hljs-property">parentElement</span>;<span class="hljs-comment">// 取得父节点</span><br><span class="hljs-keyword">const</span> removed = parent.<span class="hljs-title function_">removeChild</span>(dom);<span class="hljs-comment">// 在父节点中删除节点，并返回删除的节点</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(removed === dom); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>被删除的节点，在 DOM 树中被删了，此时还保存在内存中(所以会返回该节点)，如有需要，还可以添加到DOM树中</p></li></ul><h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><ul><li><p>事件与事件流</p><p>Javascript中的事件，可以理解就是在HTML文档或者浏览器中发生的一种交互操作，使得网页具备互动性，常见的有加载事件，鼠标事件，自定义事件等。</p><p>由于DOM是一个树结构，如果在父子节点绑定事件的时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到事件流的概念</p><p>事件流都会经历三个阶段:</p><ol><li>事件捕获阶段<br>事件捕获是一种从上往下的传播方式，事件最开始由不太具体的节点(被触发事件元素的最外层的节点)最早接受事件，开始向最具体的节点(被触发事件的元素)传播。</li><li>处于目标阶段<br>到达最具体的节点(被触发事件的元素)</li><li>事件冒泡阶段<br>事件冒泡是一种从下往上的传播方式，由最具体的元素(被触发事件的元素)然后逐渐向上传播到最不具体的那个节点(被触发事件元素的最外层的节点)，也就是DOM中最高层的父节点。</li></ol></li><li><p>事件模型</p><p>事件模型可以分为三种：原始事件模型、标准事件模型、IE事件模型（基本见不到了）</p><ul><li><p>原始事件模型（DOM0级）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt; !-- 标签直接绑定 -- &gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;button&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;btn&#x27;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;fun()&#x27;</span> /&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// js 绑定</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">btn.<span class="hljs-property">onclick</span> = fun;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 删除绑定</span></span></span><br><span class="language-javascript"><span class="language-xml">btn.<span class="hljs-property">onclick</span> = <span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>特点：</p><ol><li>绑定速度快</li><li>只支持冒泡，不支持捕获</li><li>同一类型的事件只能绑定一次</li></ol></li><li><p>标准事件模型（DOM2级）</p><p><code>addEvenListener(eventType,handler,userCapture)</code></p><ol><li>eventType：指定事件类型，如”click”</li><li>handler：事件处理函数</li><li>userCapture：boolean，默认为fasle，设置传递的类型，默认值是false，即冒泡传递；当值为true即为捕获传递</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> btn= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;.btn&#x27;</span>);<br><span class="hljs-comment">// 绑定(监听)一个事件</span><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,showMessage, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event); <span class="hljs-comment">//event 默认实参，事件对象</span><br>&#125;<br><br><span class="hljs-comment">// 可以在一个D0M元素上绑定多个事件处理器，且各自并不会冲突</span><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,showessage2,<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage2</span>(<span class="hljs-params">event</span>)&#123;&#125;<br><span class="hljs-comment">// 移除绑定(监听)</span><br>btn.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,showMessage, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>特点：</p><ol><li>可以指定触发事件的时机</li><li>同一个事件可以多次绑定</li></ol></li><li><p>IE事件基本模型（基本不用）</p><p>绑定方法：<code>attachEvent(eventType,handler)</code></p><p>移出方法：<code>detachEvent(eventType,handler)</code></p><p>特点：只冒泡不捕获</p></li></ul></li></ul><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><ul><li><p>概念</p><blockquote><p>利用事件模型的三个阶段中的冒泡阶段，将一个元素委托到另一个元素（一般是将一个元素的事件，向上委托到父级及以上的元素</p></blockquote></li><li><p>应用场景</p><ol><li><p>线性图标点击</p><p>有时用了线性图标且绑定了点击事件，可能出现点不中的情况，这时给图标外层加一个标签，再把事件绑定到外层标签上就能解决</p></li><li><p>所有子标签都绑定了同一事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;ul&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>...<br>&lt;/ul&gt;<br><br><span class="hljs-comment">//给每一个子标签都绑定一个点击事件</span><br><span class="hljs-keyword">const</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> lis)&#123;<br>    <span class="hljs-keyword">let</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//将点击事件绑定到父元素上</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-keyword">if</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span> == <span class="hljs-string">&#x27;li&#x27;</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span>)<br>&#125;<br>&#125;)<br><br><br></code></pre></td></tr></table></figure><p>优点</p><ol><li>简化代码</li><li>多个子元素绑定同一事件下，可以大大节约内存</li><li>可以解决动态添加子元素，且绑定同一事件</li></ol></li></ol></li></ul><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><ul><li><p>概念</p><blockquote><p>当栈内存的作用域形成时，JS代码执行会有一个预编译的除段。这个阶段，JS首先会检查有没有语法错误。然后将<strong>带有 var 关键字的变量</strong>与<strong>函数</strong>提到最前面做<strong>声明</strong>，这个过程称为变量提升。</p></blockquote><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><br><span class="hljs-title function_">fn</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">//123</span><br>&#125;<br><br><span class="hljs-title function_">fn2</span>(); <span class="hljs-comment">//报错</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn2</span>() = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>变量提升的过程</p><ol><li><p>将函数与var声明放置在最前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">var</span> fn2 = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure></li><li><p>从上到下执行（赋值是执行的一部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">var</span> fn2 = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//undefined</span><br>a = <span class="hljs-number">123</span>;<br><span class="hljs-title function_">fn</span>(); <span class="hljs-comment">//123</span><br><span class="hljs-title function_">fn2</span>(); <span class="hljs-comment">//报错</span><br><span class="hljs-title function_">fn2</span>() = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>var的作用</p><ul><li><p>var关键字是在当前作用域内声明了一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//2</span><br>&#125;<br><span class="hljs-title function_">fn</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//10</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//10</span><br>&#125;<br><span class="hljs-title function_">fn2</span>();<br></code></pre></td></tr></table></figure></li><li><p>块级作用域中，var声明的变量都会提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">if</span>(ture)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">//1</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)&#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>关于let和const</p><p>let与const关键字声明都不会被提升</p></li><li><p>关于不带任何关键字声明的变量</p><p>不带任何关键字声明而直接赋值的变量，在非严格模式下会把变量绑定到全局作用域中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>a = <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//1</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li><p>概念</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> fun = <span class="hljs-title function_">fn</span>();<br><span class="hljs-title function_">fun</span>();<span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><ul><li>概念一：闭包(closure)是指包含了一组相关联的数据和函数的引用，这些数据和函数共同形成一个封闭的环境。</li><li>概念二：一个函数和对其周围状态(词法环境)的引用捆绑在一起(或者是说函数被引用包围)这样的组合就是闭包。</li><li>概念三：一个函数可以引用到另一个函数的作用域，就是闭包。</li></ul></li><li><p>特点</p><blockquote><p>一般函数的词法环境（可以看成是执行上下文或干脆是作用域）在函数返回后就会被销毁。但闭包会保存对创建时所在词法环境的引用，即便在创建时所在的执行上下文被销毁了，但创建时所在的词法环境还存在，所以可以延长变量的生命周期。</p></blockquote></li><li><p>应用场景</p><p>延长变量的生命周期，创建私有变量，创建函数工厂</p><ul><li><p>延长变量的生命周期</p><p>闭包可以使得函数内部的变量在函数执行完毕后仍然保持存活，可以在后续的操作中继续使用。</p></li><li><p>创建私有变量</p><p>通过闭包可以创建私有变量，只能通过暴露的接口访问和修改，实现了数据的封装和隐藏。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPrivateVariable</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> privateVar =<span class="hljs-string">&quot;这是一个私有变量&quot;</span>;<span class="hljs-comment">// 定义一个私有变量</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPrivateVariable</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> privateVar; <span class="hljs-comment">//返回私有变量的值</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setPrivateVariable</span>(<span class="hljs-params">value</span>)&#123;<br>        privateVar = value;<span class="hljs-comment">//设置私有变量的值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">getValue</span>: getPrivateVariable，<span class="hljs-comment">// 公开获取私有变量的函数</span><br>        <span class="hljs-attr">setValue</span>:setPrivateVariable <span class="hljs-comment">// 公开设置私有变量的函数</span><br>    &#125;；<br>&#125;<br><br><span class="hljs-keyword">var</span> myObject = <span class="hljs-title function_">createPrivateVariable</span>();<span class="hljs-comment">// 调用函数并将结果赋值给my0bject对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(my0bject.<span class="hljs-property">privateVar</span>);<span class="hljs-comment">// undefined privateVar是私有变量所以无法直接访问</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObject.<span class="hljs-title function_">getValue</span>());<span class="hljs-comment">//输出:&quot;这是一个私有变量</span><br>myObject.<span class="hljs-title function_">setValue</span>(<span class="hljs-string">&quot;新的私有变量&quot;</span>);<span class="hljs-comment">// 修改私有变量的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(my0bject.<span class="hljs-title function_">getValue</span>());<span class="hljs-comment">//输出:&quot;新的私有变量”</span><br></code></pre></td></tr></table></figure></li><li><p>创建函数工厂</p><p>通过闭包可以动态生成函数，每个函数都有自己独立的作用域和状态。</p></li></ul></li><li><p>销毁闭包</p><p>由于闭包的特性，一旦被创建，它所在的词法环境（执行上下文、作用域、变量）不会被JS自动回收。增大了内存的损耗，甚至会发生内存溢出。所以在开发中，非必须情况下，尽量不要去用闭包。在闭包使用完成后，手动去销毁。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> fun = <span class="hljs-title function_">fn</span>();<br><span class="hljs-title function_">fun</span>();<span class="hljs-comment">// 1</span><br>fun = <span class="hljs-literal">null</span>;<span class="hljs-comment">//销毁</span><br></code></pre></td></tr></table></figure></li><li><p>错误使用闭包的案例</p><p>在构造函数中使用闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Obj</span>(<span class="hljs-params">name</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应该用在原型中添加方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Obj</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-title class_">Obj</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><ul><li><p>概念</p><p>JS是单线程的，这意味着在JS中同一事件只能做一件事情</p></li></ul><blockquote><p>当我们的代码由上到下，罗列了很多事情时，对于<strong>单线程语言</strong>来说有两种处理方式：</p><ol><li>等待上一件事情做完，再来做下一件事情。这种情况我们称为阻塞，以 php 为代表;</li><li>上一件事情如果是一种特定的需要等待一定时间完成的事情，先把放到一个待执行的队列中，然后跳过，执行下一件事情。当所有可以做的事情都完成后，再从待执行队列中取出未完成的事情，再次执行。这种情况我们称为<strong>事件循环</strong>，以js为代表</li></ol></blockquote><p>在事件循环的概念中，我们了解到有一个待执行的队列，我们称为事件队列。事件队列需要保存在一个地方，执行完一个，销毁一个，这个地方我们称为执行栈。</p><ul><li><p>JS的任务分类</p><p>在事件循环的概念中，我们了解到并不是所有耗时的事情都会进入事件循环，有一些事情是必须要先执行完成的，比方说 for 循环，即使再耗时也是需要先执行完成的。而JS就通过任务分类来划分先后</p><ul><li>同步任务<br>比如 var 声明了一个变量、比如 for 循环，这些任务会直接进入主线程执行，我们称为同步任务</li><li>异步任务<br>比如 ajax 的网络请求，setTimeout 的定时执行，就是异步任务。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<span class="hljs-comment">// 同步任务</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123; <span class="hljs-comment">// 异步任务</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>&#125;，<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 同步任务</span><br><br><span class="hljs-comment">// out：1,3,4</span><br></code></pre></td></tr></table></figure></li><li><p>宏任务和微任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 宏任务与微任务示例</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 同步任务</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123; <span class="hljs-comment">// 异步任务</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;，<span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>((resolve)=&#123; <span class="hljs-comment">//同步任务</span><br><span class="hljs-title function_">resolve</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123; <span class="hljs-comment">// 异步任务</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//同步任务</span><br></code></pre></td></tr></table></figure><p>从上面示例中，我们看到五个任务中，有两个是异步任务，三个同步任务。</p><p>在第一次事件循环中，异步任务会放入任务队列（执行栈）中。第二次事件循环时，也是由上到下(执行栈先进先出原则)去执行，结果应该为：<code>1, 3, 5, 2, 4</code></p><p>但事实结果为：<code>1, 3, 5, 4, 2</code>，这就引出了一个概念：<strong>JS中异步任务又分为宏任务和微任务</strong></p><ul><li>宏任务：SetTimeout、setInterval等</li><li>微任务：promise、async等</li></ul><p>为了便于记忆，<strong>微任务</strong>可以视为同步任务的尾巴，当一个同步任务执行得差不多了，就要执行”收尾“，再往下执行</p></li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li><p>用处</p><p>JavaScript 中会用到异步操作的情况有很多，主要包括以下几个方面：</p><blockquote><ol><li>网络请求：当需要通过 AJAX、Fetch 或其他方式向服务器请求数据时，由于网络请求是一个耗时的操作，为了避免阻塞页面，通常会使用异步操作来发送请求并在数据返回后处理响应。</li><li>定时任务：例如使用 <code>setTimeout</code> 或 <code>setInterval</code> 来执行一些需要延迟或定时执行的操作，这些操作是异步的，不会阻塞主线程的执行。</li><li>事件处理：页面中的用户交互和事件处理也是典型的异步操作。比如点击按钮、鼠标移动、键盘输入等事件都是异步触发的，需要通过事件监听器进行处理。</li><li>文件操作：读取文件、写入文件或上传文件等操作通常也是异步的，因为这些操作需要涉及文件系统或网络，可能会花费较长时间。</li><li>动画效果：实现页面动画效果通常也需要使用异步操作，比如使用 CSS 动画、JavaScript 动画库或者 Web Animation API。</li></ol></blockquote></li></ul><p>JS到ES6之后，处理异步任务一共经历过四个阶段，可以称之为JS异步四部曲</p><ul><li><p>Callback</p><p>早先我们将一个闭包作为参数传给函数，待函数处理完该做的事情后，再执行这个闭包方法，来处理异步任务。这种就称之为<strong>回调</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params">callback,n</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">callback</span>(n+<span class="hljs-number">1</span>)<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;<br><br><span class="hljs-title function_">getDate</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r);<br>&#125;，<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>但是遇到一个令人头大的问题，如果一个逻辑里有多个连续的异步任务执行，就会出现如下问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getDate</span>(<span class="hljs-function">(<span class="hljs-params">d1</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d1);<br>    <span class="hljs-title function_">getDate</span>(<span class="hljs-function">(<span class="hljs-params">d2</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d2);<br>        <span class="hljs-title function_">getDate</span>(<span class="hljs-function">(<span class="hljs-params">d3</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d3);<br>        &#125;，d2)<br>    &#125;，d1)<br>&#125;，<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>这个现象就称之为<strong>回调地狱</strong></p></li><li><p>Promise</p><p>promise是ES6提供的异步处理方法，解决了回调地狱的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(n &gt;= <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;这是一个错误&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-title function_">resolve</span>(n + <span class="hljs-number">1</span>)<br>        &#125;，<span class="hljs-number">1000</span>)<br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">getData</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">d1</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getData</span>(d1);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">d2</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getData</span>(d2);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">d3</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getData</span>(d3);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>&#125;)<br></code></pre></td></tr></table></figure><p>promise的then方法的链式调用，使得代码清晰了很多</p><ul><li><p>then方法用来处理resolve（执行成功）的返回值</p></li><li><p>catch方法用来处理reject（执行失败）的返回值</p></li><li><p>promise对象的all与race方法用来处理promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resovle</span> =&gt;</span> <span class="hljs-title function_">resovle</span>(<span class="hljs-number">1</span>));<br><span class="hljs-keyword">const</span> p2 =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resovle</span> =&gt;</span> <span class="hljs-title function_">resovle</span>(<span class="hljs-number">2</span>));<br><span class="hljs-keyword">const</span> p3 =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resovle</span> =&gt;</span> <span class="hljs-title function_">resovle</span>(<span class="hljs-number">3</span>));<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1,p2,p3]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<span class="hljs-comment">//[1，2，3]</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>&#125;)<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1,p2,p3]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<span class="hljs-comment">//1</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>all 方法等待所有 promise 执行成功后，执行 then 方法，并返回一个数组，数组元素分别为各 promise.resovle 的结果。如果有一个失败，执行了 promise.reject，都会执行 catch 方法，来捕获错误。race方法只要有一个 promise 执行成功后，执行 then 方法，并返回这个 promise.resovle 的结果。对失败的处理与 all 方法相同。</p></li><li><p>generator</p></li><li><p>async&#x2F;await</p><p>异步任务的完美处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(n &gt;= <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;这是一个错误&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-title function_">resolve</span>(n + <span class="hljs-number">1</span>)<br>        &#125;，<span class="hljs-number">1000</span>)<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">const</span> d1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d1);<br>        <br>        <span class="hljs-keyword">const</span> d2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>(d1);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d2);<br>        <br>        <span class="hljs-keyword">const</span> d3 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>(d2);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d3);<br>    &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>有 async 修饰符的函数，声明为异步函数，返回值是promise对象；如果async关键字函数返回的不是promise，会自动用Promise.resolve()包装成promise对象；</p></li><li><p>await 只能运行在有 async 修饰符的函数中;</p></li><li><p>await 会阻塞函数的执行，直到后边的表达式运行完成。</p></li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo本地配置与部署到github.io和云服务器</title>
    <link href="/2024/hexo-configuration/"/>
    <url>/2024/hexo-configuration/</url>
    
    <content type="html"><![CDATA[<p>第一次将 hexo 博客部署到云服务器上，记录一下配置心得</p><p>特意撰写了一个从 0 开始配置的教程，即使是新手也能放心食用！</p><h2 id="本地配置-hexo"><a href="#本地配置-hexo" class="headerlink" title="本地配置 hexo"></a>本地配置 hexo</h2><h3 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h3><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，是一个让 JavaScript 运行在服务端的开发平台。</p></blockquote><p>从<a href="https://nodejs.org/zh-cn">Nodejs 官方地址</a>下载所需要的版本并进行环境变量的配置。建议下载<strong>LTS</strong>（即 Long Term Support，长期技术支持）</p><p>由于墙的原因，直接使用 npm 下载依赖可能会出现无法下载的情况，所以建议使用淘宝镜像替换。执行下面的命令，将 npm 的源设置为淘宝镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry &quot;https://registry.npm.taobao.org&quot;<br></code></pre></td></tr></table></figure><p>除此之外，还可以安装 cnpm：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><blockquote><p>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p></blockquote><p>从<a href="https://git-scm.com/downloads/">git 官方链接</a>下载所需要的版本并进行环境变量的配置。如果下载速度过慢，也可以去官方文档推荐的 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 Git。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在 cmd 中输入以下命令并观察是否得到了正确的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git -v<br>node -v<br>npm -v<br></code></pre></td></tr></table></figure><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>根据下列指令进行 Hexo 框架的安装（如果出现网络问题可将 npm 替换为 cnpm）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>等待安装结束后选择一个目录来初始化 Blog（例如 E:&#x2F;blog）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd e:/blog<br>hexo init<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以按照官方文档的安装方法</span><br>cd e:/<br>hexo init blog<br>cd blog<br></code></pre></td></tr></table></figure><p>执行成功后在进行一些常用插件的安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br>npm install hexo-server --save<br>npm install hexo-admin --save<br>npm install hexo-generator-archive --save<br>npm install hexo-generator-feed --save<br>npm install hexo-generator-search --save<br>npm install hexo-generator-tag --save<br>npm install hexo-deployer-git --save<br>npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure><p>至此本地 hexo 配置已经完成，可以在本地进行查看</p><p>使用<code>hexo g</code>生成静态页面，<code>hexo s</code>启动本地服务器，随后进入<code>localhost:4000</code>查看配置好的 hexo 博客。</p><h2 id="部署到Github-io上"><a href="#部署到Github-io上" class="headerlink" title="部署到Github.io上"></a>部署到Github.io上</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><p>新建一个名为<code>&#123;github_name&#125;.github.io</code>，例如我的Github名字是WangshuXC，就建立一个叫<code>WanghsuXC.github.io</code>的仓库</p><h3 id="ssh密钥"><a href="#ssh密钥" class="headerlink" title="ssh密钥"></a>ssh密钥</h3><p>打开git bash终端设置 user.name 和 user.email</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;你的GitHub用户名&quot;<br>git config --global user.email &quot;你的GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>生成ssh密匙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>随后将公钥添加到github上，这样推送的时候就不用多次输入密码</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>修改配置文件 <strong>blog&#x2F;_config.yml</strong>，修改deploy项的内容，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;git&quot;</span><br>  <span class="hljs-attr">repo:</span><br>    <span class="hljs-attr">github:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">git@github.com:WangshuXC/WangshuXC.github.io.git</span><br>      <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>注意将<code>WangshuXC</code>替换为你的github用户名</p><p>输入下面的命令将hexo博客推送到到github仓库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl  #清理之前生成的文件<br>hexo g   #生成静态页面<br>hexo d   #部署<br></code></pre></td></tr></table></figure><p>随后等待Github的action运行完毕就能在<code>[yourname].github.io</code>查看到部署好的博库了</p><h2 id="部署到云服务器"><a href="#部署到云服务器" class="headerlink" title="部署到云服务器"></a>部署到云服务器</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>首先进入服务器的管理界面，找到<em><strong>安全</strong></em>选项中的<em><strong>防火墙</strong></em>（可能有一些服务商写的类似的<em><strong>安全组</strong></em>），确认应用类型 <code>HTTP</code> 协议 <code>TCP</code> 端口 <code>80</code> 是否设置打开</p><p>确认防火墙的配置没问题后可以安装<strong>宝塔面板</strong>，它会帮我们安装Nginx和NodeJs，能够令我们更轻松地配置博客</p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>以我的CentOs为例</p><p>运行<code>yum install git</code>安装git，因为我的服务器都是root用户使用的，就不进行配置git用户的环节</p><h3 id="配置仓库和网站文件夹"><a href="#配置仓库和网站文件夹" class="headerlink" title="配置仓库和网站文件夹"></a>配置仓库和网站文件夹</h3><p>在一个你喜欢的位置新建一个空的git仓库，例如我就选择建立到&#x2F;var&#x2F;repo&#x2F;blog.git中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /var/repo<br>git init --bare hexoblog.git<br></code></pre></td></tr></table></figure><p>随后建立一个文件夹用于存放要部署的博客，例如我就选择建立到&#x2F;www&#x2F;wwwroot&#x2F;hexoblog</p><p>在 <code>/var/repo/blog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹，我们创建一个新的 <code>git</code> 钩子 <code>post-receive</code>，用于自动部署。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash </span><br> git --work-tree=/www/wwwroot/hexoblog --git-dir=/var/repo/hexoblog.git checkout -f<br></code></pre></td></tr></table></figure><p>编辑结束之后，按 <code>esc</code> 键，然后输入 <code>:wq</code> 并敲回车键退出vim编辑器并保存文件。</p><p>添加完毕后修改权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x ~/var/repo/hexoblog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><h3 id="推送-1"><a href="#推送-1" class="headerlink" title="推送"></a>推送</h3><p>修改本机的配置文件 <strong>blog&#x2F;_config.yml</strong>，修改deploy项的内容，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;git&quot;</span><br>  <span class="hljs-attr">repo:</span><br>    <span class="hljs-attr">github:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">git@github.com:WangshuXC/WangshuXC.github.io.git</span><br>      <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>    <span class="hljs-comment"># 添加如下代码</span><br>    <span class="hljs-attr">tencent:</span> <span class="hljs-comment"># 随便命名，因为我是用腾讯云就使用‘tencent’这个命名了</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">root@&#123;你的云服务器ip&#125;:/var/repo/hexoblog.git</span> <br>      <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>至此就配置完成了，只需要在本机运行<code>hexo g -d</code>就能同时推送到github和云服务器中了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/hello/"/>
    <url>/2024/hello/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-hexo"><a href="#Hello-hexo" class="headerlink" title="Hello-hexo"></a>Hello-hexo</h1><p>这是我的第一篇文章</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
