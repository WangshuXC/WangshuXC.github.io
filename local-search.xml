<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端复习笔记</title>
    <link href="/2024/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML与CSS"><a href="#HTML与CSS" class="headerlink" title="HTML与CSS"></a>HTML与CSS</h2><h3 id="HTML标签类型"><a href="#HTML标签类型" class="headerlink" title="HTML标签类型"></a>HTML标签类型</h3><ul><li>块级元素 block<ul><li>div ul ol li p from table tr h1-h6</li><li>可设置宽高</li><li>独占一行</li><li>margin和padding都生效</li></ul></li><li>内联元素 inline<ul><li>span a b i em strong</li><li>不可设置宽高</li><li>不会独占一行</li><li>margin和padding的top和bottom都不生效</li></ul></li><li>内联块级元素<ul><li>input select textarea img td</li><li>可设置宽高</li><li>不会独占一行</li><li>margin和padding都生效</li></ul></li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ul><li><p>概念</p><blockquote><p>页面之所以能够展示到浏览器上，是需要浏览器的渲染引擎执行渲染的。浏览器的渲染是有一系列标准的CSS 基础框盒模型(CSS basic box model)，就是标准之一，它会将所有元素表示为一个个矩形的盒子(box)。我们称之为盒子模型。</p></blockquote></li><li><p>组成部分</p><ul><li>content 内容的宽高</li><li>padding 内边距</li><li>border 边框</li><li>margin 外边距</li></ul></li><li><p>box-sizing</p><p>box-sizing可以指定浏览器用哪种方式来渲染盒子模型</p><p>box-sizing: content-box | border-box | inherit</p><ul><li>content-box 标准盒子模型</li><li>border-box 怪异（IE）盒子模型（元素的宽和高包含了border和padding）</li><li>inherit 继承（默认）</li></ul></li></ul><h3 id="浮动元素"><a href="#浮动元素" class="headerlink" title="浮动元素"></a>浮动元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">float</span>: left | right | <span class="hljs-built_in">none</span>(默认)<br></code></pre></td></tr></table></figure><ul><li><p>特性</p><ul><li>相对于父元素:浮动元素的外边界不会超出父元素的内边界。</li><li>相对于兄弟浮动元素:后出现的浮动元素排在先出先的浮动元素之后( left时，后出现的排在先出现的右侧；right时，后出现的排在先出现的左侧)</li><li>脱离标准流:浮动元素不再保留其在文档流中的位置，而是根据其浮动方向移动到指定的位置。</li><li>一行内显示:如果多个元素都设置了浮动，它们会按照各自的浮动方向在一行内显示，并沿着顶部边缘对齐</li><li>具有行内块元素特性:浮动元素可以设置宽度和高度，即使它们原先是行内元素。</li><li>对布局的影响:当父元素的高度小余内容高度时，会影响父元素的相邻元素的布局。</li></ul></li><li><p>清除浮动</p><ul><li><p>父元素增加属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: auto | hideden | overlay | scroll<br></code></pre></td></tr></table></figure></li><li><p>相邻元素增加属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">clear</span>: both;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>: <span class="hljs-built_in">static</span>(默认) | relative | absolute | fixed | sticky<br></code></pre></td></tr></table></figure><ul><li><p>static:：元素按正常文档流进行布局，不被其他元素影响</p></li><li><p>relative：相对定位，通过设置top、bottom、left、right来调整元素的位置，但保留原本的空间</p></li><li><p>absolute：绝对定位，不按照正常文档流的方式，而是根据最近的已定位的祖先元素（relative）进行定位，如果没有就使用body作为参考</p></li><li><p>fixed：固定定位，与absolute类似，但始终相对于视窗而非窗口</p></li><li><p>sticky：粘性定位，当元素到达指定位置时，开始相对定位，否则随滚动条滚动</p></li><li><p>偏移</p><ul><li>top&#x2F;bottom&#x2F;left&#x2F;right：偏移量，定义元素相对于其父元素的边线的距离</li></ul></li></ul><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><blockquote><p>用于定义元素的特殊状态</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">selector:pseudo-class&#123;<br>property:value;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的伪类</p><ul><li>hover 鼠标悬停</li><li>nth-child() 第n个子元素</li><li>first-child 第一个子元素</li><li>last-child 最后一个子元素</li></ul><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><blockquote><p>用于设置元素指定部分的样式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">selector::pseudo-element&#123;<br>property:value;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的伪元素</p><ul><li><p>after 在每个<code>&lt;selector&gt;</code>之后插入内容</p></li><li><p>before 在每个<code>&lt;selector&gt;</code>之前插入内容</p></li><li><p>first-letter 选择每个<code>&lt;selector&gt;</code>的首字母</p></li><li><p>first-line 选择每个<code>&lt;selector&gt;</code>的首行</p></li><li><p>selection 选择用户选择的元素部分</p></li><li><p>content属性</p><p>可以是文字也可以是图片</p></li><li><p>常见案例：位于边角的未读消息数量&#x2F;红点</p></li></ul><h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><p>Flex布局又称弹性布局，是CSS3中新增的规范。适应各种设备的不同宽度，而不必依赖于传统的块状布局和浮动定位。目前主流浏览器均已支持(不支持IE9及以下版本)。</p><ul><li><p>核心</p><ul><li>弹性容器：采用Flex布局的外层容器</li><li>弹性项：容器中的子元素</li><li>主轴：弹性容器的水平或垂直方向</li><li>交叉轴：与主轴垂直的方向</li><li>对其方向：设置弹性项在弹性容器内对齐的方式</li></ul></li><li><p>container属性</p><ul><li><p>flex-direction</p><ul><li><p>用于确定主轴方向</p></li><li><p><code>flex-direction: row(水平从左向右) | row-reserse | column(竖直从上向下) | column-reverse;</code></p></li></ul></li><li><p>flex-wrap</p><ul><li><p>换行方向</p></li><li><p><code>flex-wrap: nowrap(不换行，默认) | wrap(换行)  | wrap-reverse(换行，第一行在下方);</code></p></li></ul></li><li><p>flex-flow</p><ul><li>flex-direction和flex-wrap的简写形式，默认值为 row nowrap</li></ul></li><li><p>justify-content</p><ul><li><p>主轴对齐方式</p></li><li><p><code>justify-content: flex-star(默认，左对齐) | flex-end(右对齐) | center(居中) | space-between(两端对齐，项目之间间隔相等) | space-around(每个项目两侧的间隔相等，项目之间的间隔比项目与边框的间隔大一倍);</code></p></li></ul></li><li><p>align-items</p><ul><li><p>交叉轴对齐方式</p></li><li><p><code>align-items: flex-start(交叉轴的起点对齐) | flex-end (交叉轴的终点对齐)| center(交叉轴的中点对齐) | baseline(项目的第一行文字的基线对齐) | stretch(默认，如果项目未设置高度或设置为auto，将占满整个容器高度);</code></p></li></ul></li><li><p>align-content</p><ul><li><p>多个交叉轴的对齐方式</p></li><li><p><code>align-content: flex-star(交叉轴的起点对齐) | flex-end(交叉轴的终点对齐) | center(交叉轴的中点对齐) | space-between(与交叉轴的两端对齐，轴线之间的间隔平均分布) | space-around(每根周线的两侧的间隔都相等，所以轴线之间的间隔比轴线和边框的间隔大一倍) | stretch(默认，轴线占满整个交叉轴);</code></p></li></ul></li></ul></li><li><p>item属性</p><ul><li>order<ul><li>定义项目的排列顺序，数值越小越靠前，默认为0</li></ul></li><li>flex-grow<ul><li>定义项目的放大比例，默认为0（即如果存在剩余空间也不放大），如果为1会占满剩余空间，设置为n就是宽度为设置为1的n倍。</li></ul></li><li>flex-shrink<ul><li>定义项目的缩小比例，默认为1（即如果空间不足，该项目就缩小）</li></ul></li><li>flex-basis<ul><li>定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据这个属性计算主轴是否有多余的空间。默认值是auto，即项目的本来大小</li></ul></li><li>align-self<ul><li>允许单个项目由与其他项目不一样的对齐方式，可以覆盖<code>align-items</code>属性。默认为auto，表示继承父元素的<code>align-items</code>属性，如果没有父元素就等同于<code>stretch</code></li></ul></li><li>flex<ul><li>flex是flex-grow，flex-shrink，flex-basis的简写，默认值是<code>0 1 auto</code>。后两个属性可选</li></ul></li></ul></li></ul><h3 id="css可继承的属性"><a href="#css可继承的属性" class="headerlink" title="css可继承的属性"></a>css可继承的属性</h3><ul><li>字体全部属性<br>font、font-style、font-family、font-variant、font-weight、font-size、font-stretch、font-size-adjust</li><li>文本全部属性<br>color、 direction、 letter-spacing、 line-height、 text-align、 text-indent、 text-decoration、 text-shadow、 text-transform、word-spacing、unicode-bidi、white-space.</li><li>元素可见性<br>visibility。</li><li>表格的全部属性<br>border-collapse、border-spacing、caption-side、empty-cells、table-layout.</li><li>列表的全部属性<br>list-style、list-style-type、list-style-position、list-style-image.</li><li>其他属性<br>cursor、quotes、pointer-events.</li></ul><h3 id="Head标签"><a href="#Head标签" class="headerlink" title="Head标签"></a>Head标签</h3><ul><li>meta标签<ul><li>描述了一些基本的元数据</li><li>提供了元数据（虽然不显示在页面上，但是会被浏览器解析）</li><li>用于网页的描述、关键词、文件的最后修改时间、作者和其他元数据</li><li>元数据可以用于浏览器（如何显示内容或者加载页面）、搜索引擎（关键字）或者其他Web服务</li></ul></li><li>title</li></ul><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo本地配置与部署到github.io和云服务器</title>
    <link href="/2024/hexo-configuration/"/>
    <url>/2024/hexo-configuration/</url>
    
    <content type="html"><![CDATA[<p>第一次将 hexo 博客部署到云服务器上，记录一下配置心得</p><p>特意撰写了一个从 0 开始配置的教程，即使是新手也能放心食用！</p><h2 id="本地配置-hexo"><a href="#本地配置-hexo" class="headerlink" title="本地配置 hexo"></a>本地配置 hexo</h2><h3 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h3><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，是一个让 JavaScript 运行在服务端的开发平台。</p></blockquote><p>从<a href="https://nodejs.org/zh-cn">Nodejs 官方地址</a>下载所需要的版本并进行环境变量的配置。建议下载<strong>LTS</strong>（即 Long Term Support，长期技术支持）</p><p>由于墙的原因，直接使用 npm 下载依赖可能会出现无法下载的情况，所以建议使用淘宝镜像替换。执行下面的命令，将 npm 的源设置为淘宝镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry &quot;https://registry.npm.taobao.org&quot;<br></code></pre></td></tr></table></figure><p>除此之外，还可以安装 cnpm：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><blockquote><p>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p></blockquote><p>从<a href="https://git-scm.com/downloads/">git 官方链接</a>下载所需要的版本并进行环境变量的配置。如果下载速度过慢，也可以去官方文档推荐的 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 Git。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在 cmd 中输入以下命令并观察是否得到了正确的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git -v<br>node -v<br>npm -v<br></code></pre></td></tr></table></figure><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>根据下列指令进行 Hexo 框架的安装（如果出现网络问题可将 npm 替换为 cnpm）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>等待安装结束后选择一个目录来初始化 Blog（例如 E:&#x2F;blog）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd e:/blog<br>hexo init<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以按照官方文档的安装方法</span><br>cd e:/<br>hexo init blog<br>cd blog<br></code></pre></td></tr></table></figure><p>执行成功后在进行一些常用插件的安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br>npm install hexo-server --save<br>npm install hexo-admin --save<br>npm install hexo-generator-archive --save<br>npm install hexo-generator-feed --save<br>npm install hexo-generator-search --save<br>npm install hexo-generator-tag --save<br>npm install hexo-deployer-git --save<br>npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure><p>至此本地 hexo 配置已经完成，可以在本地进行查看</p><p>使用<code>hexo g</code>生成静态页面，<code>hexo s</code>启动本地服务器，随后进入<code>localhost:4000</code>查看配置好的 hexo 博客。</p><h2 id="部署到Github-io上"><a href="#部署到Github-io上" class="headerlink" title="部署到Github.io上"></a>部署到Github.io上</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><p>新建一个名为<code>&#123;github_name&#125;.github.io</code>，例如我的Github名字是WangshuXC，就建立一个叫<code>WanghsuXC.github.io</code>的仓库</p><h3 id="ssh密钥"><a href="#ssh密钥" class="headerlink" title="ssh密钥"></a>ssh密钥</h3><p>打开git bash终端设置 user.name 和 user.email</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;你的GitHub用户名&quot;<br>git config --global user.email &quot;你的GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>生成ssh密匙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;<br></code></pre></td></tr></table></figure><p>随后将公钥添加到github上，这样推送的时候就不用多次输入密码</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>修改配置文件 <strong>blog&#x2F;_config.yml</strong>，修改deploy项的内容，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;git&quot;</span><br>  <span class="hljs-attr">repo:</span><br>    <span class="hljs-attr">github:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">git@github.com:WangshuXC/WangshuXC.github.io.git</span><br>      <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>注意将<code>WangshuXC</code>替换为你的github用户名</p><p>输入下面的命令将hexo博客推送到到github仓库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl  #清理之前生成的文件<br>hexo g   #生成静态页面<br>hexo d   #部署<br></code></pre></td></tr></table></figure><p>随后等待Github的action运行完毕就能在<code>[yourname].github.io</code>查看到部署好的博库了</p><h2 id="部署到云服务器"><a href="#部署到云服务器" class="headerlink" title="部署到云服务器"></a>部署到云服务器</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>首先进入服务器的管理界面，找到<em><strong>安全</strong></em>选项中的<em><strong>防火墙</strong></em>（可能有一些服务商写的类似的<em><strong>安全组</strong></em>），确认应用类型 <code>HTTP</code> 协议 <code>TCP</code> 端口 <code>80</code> 是否设置打开</p><p>确认防火墙的配置没问题后可以安装<strong>宝塔面板</strong>，它会帮我们安装Nginx和NodeJs，能够令我们更轻松地配置博客</p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>以我的CentOs为例</p><p>运行<code>yum install git</code>安装git，因为我的服务器都是root用户使用的，就不进行配置git用户的环节</p><h3 id="配置仓库和网站文件夹"><a href="#配置仓库和网站文件夹" class="headerlink" title="配置仓库和网站文件夹"></a>配置仓库和网站文件夹</h3><p>在一个你喜欢的位置新建一个空的git仓库，例如我就选择建立到&#x2F;var&#x2F;repo&#x2F;blog.git中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /var/repo<br>git init --bare hexoblog.git<br></code></pre></td></tr></table></figure><p>随后建立一个文件夹用于存放要部署的博客，例如我就选择建立到&#x2F;www&#x2F;wwwroot&#x2F;hexoblog</p><p>在 <code>/var/repo/blog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹，我们创建一个新的 <code>git</code> 钩子 <code>post-receive</code>，用于自动部署。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash </span><br> git --work-tree=/www/wwwroot/hexoblog --git-dir=/var/repo/hexoblog.git checkout -f<br></code></pre></td></tr></table></figure><p>编辑结束之后，按 <code>esc</code> 键，然后输入 <code>:wq</code> 并敲回车键退出vim编辑器并保存文件。</p><p>添加完毕后修改权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x ~/var/repo/hexoblog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><h3 id="推送-1"><a href="#推送-1" class="headerlink" title="推送"></a>推送</h3><p>修改本机的配置文件 <strong>blog&#x2F;_config.yml</strong>，修改deploy项的内容，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;git&quot;</span><br>  <span class="hljs-attr">repo:</span><br>    <span class="hljs-attr">github:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">git@github.com:WangshuXC/WangshuXC.github.io.git</span><br>      <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>    <span class="hljs-comment"># 添加如下代码</span><br>    <span class="hljs-attr">tencent:</span> <span class="hljs-comment"># 随便命名，因为我是用腾讯云就使用‘tencent’这个命名了</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">root@&#123;你的云服务器ip&#125;:/var/repo/hexoblog.git</span> <br>      <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>至此就配置完成了，只需要在本机运行<code>hexo g -d</code>就能同时推送到github和云服务器中了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/hello/"/>
    <url>/2024/hello/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-hexo"><a href="#Hello-hexo" class="headerlink" title="Hello-hexo"></a>Hello-hexo</h1><p>这是我的第一篇文章</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
